plugins {
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'eclipse'
}

group = 'com.tabroadn'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.apache.commons:commons-lang3:3.11'
	compileOnly 'org.projectlombok:lombok:1.18.20'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly "mysql:mysql-connector-java"
	annotationProcessor 'org.projectlombok:lombok:1.18.20'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
}

def webappDir = "$projectDir/src/main/react-ui"

sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/dist/apps", "$projectDir/src/main/resources"]
		}
	}
}
 
task buildReact(type:Exec) {
	description = "Assemble webapp resources that are served by the application"
	dependsOn "installReact"
	workingDir "$webappDir"
	inputs.file "$webappDir/workspace.json"
	inputs.dir "$webappDir/apps"
	outputs.dir "$webappDir/dist/apps/app"

	// Add task to the standard build group
	group = BasePlugin.BUILD_GROUP
	// ng doesn't exist as a file in windows -> ng.cmd
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "npm.cmd", "run", "build"
	} else {
		commandLine "npm", "run", "build"
	}
}
 
task installReact(type:Exec) {
	description = "Assemble dependencies required to build the webapp"
	workingDir "$webappDir"
	inputs.file "$webappDir/package.json"
	outputs.dir "$webappDir/node_modules"

	group = BasePlugin.BUILD_GROUP
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "npm.cmd", "install"
	} else {
		commandLine "npm", "install"
	}
}
